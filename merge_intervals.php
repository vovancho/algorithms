<?php
/**
 * $intervals - массив интервалов, где интервал является массивом с левой и правой границей.
 * Задача состоит в том, чтобы объединить все пересекающиеся интервалы в массиве интервалов.
 * Массив не пересекающихся интервалов, которые покрывают все интервалы во входных данных — это то, что нам нужно вернуть.
 */
class Solution
{
    public function merge(array $intervals): array
    {
        // сортируем интервалы по времени начала.
        usort($intervals, static fn($a, $b) => $a[0] <=> $b[0]);

        // создаем пустой список для хранения объединенных интервалов.
        $mergedIntervals = [];
        $interval = $intervals[0];

        // проходим по интервалам и проверяем, пересекаются ли они с последним интервалом в объединенном списке.
        for ($i = 1; $i < count($intervals); $i++) {
            if ($interval[1] >= $intervals[$i][0]) {
                // если интервалы пересекаются, объединяем их, обновив правую границу интервала.
                $interval[1] = max($interval[1], $intervals[$i][1]);
            } else {
                // если интервалы не пересекаются, добавляем текущий интервал в объединенный список.
                $mergedIntervals[] = $interval;
                $interval = $intervals[$i];
            }
        }

        $mergedIntervals[] = $interval;

        return $mergedIntervals;
    }
}

var_dump(
    (new Solution())->merge([[1, 3], [2, 6], [8, 10], [15, 18]])
);

// output: array(3) {
//   [0] => array(2) {
//     [0] => int(1)
//     [1] => int(6)
//   }
//   [1] => array(2) {
//     [0] => int(8)
//     [1] => int(10)
//   }
//   [2] => array(2) {
//     [0] => int(15)
//     [1] => int(18)
//   }
// }
